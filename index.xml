<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Muhammad Yaseen</title>
    <link>https://myaseen.github.io/</link>
      <atom:link href="https://myaseen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Muhammad Yaseen</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Muhammad Yaseen (2022)</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://myaseen.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Muhammad Yaseen</title>
      <link>https://myaseen.github.io/</link>
    </image>
    
    <item>
      <title>Python basics</title>
      <link>https://myaseen.github.io/courses/example/python/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/courses/example/python/</guid>
      <description>&lt;p&gt;Build a foundation in Python.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/rfscVS0vtbw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the difference between lists and tuples?&lt;/summary&gt;
  &lt;p&gt;&lt;p&gt;Lists&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists are mutable - they can be changed&lt;/li&gt;
&lt;li&gt;Slower than tuples&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_list = [1, 2.0, &#39;Hello world&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tuples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are immutable - they can&amp;rsquo;t be changed&lt;/li&gt;
&lt;li&gt;Tuples are faster than lists&lt;/li&gt;
&lt;li&gt;Syntax: &lt;code&gt;a_tuple = (1, 2.0, &#39;Hello world&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Is Python case-sensitive?&lt;/summary&gt;
  &lt;p&gt;Yes&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Visualization</title>
      <link>https://myaseen.github.io/courses/example/visualization/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/courses/example/visualization/</guid>
      <description>&lt;p&gt;Learn how to visualize data with Plotly.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hSPmj7mK6ng&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;When is a heatmap useful?&lt;/summary&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-3&#34;&gt;
  &lt;summary&gt;Write Plotly code to render a bar chart&lt;/summary&gt;
  &lt;p&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
data_canada = px.data.gapminder().query(&amp;quot;country == &#39;Canada&#39;&amp;quot;)
fig = px.bar(data_canada, x=&#39;year&#39;, y=&#39;pop&#39;)
fig.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Statistics</title>
      <link>https://myaseen.github.io/courses/example/stats/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/courses/example/stats/</guid>
      <description>&lt;p&gt;Introduction to statistics for data science.&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-clock  pr-1 fa-fw&#34;&gt;&lt;/i&gt; 1-2 hours per week, for 8 weeks&lt;/p&gt;
&lt;h2 id=&#34;learn&#34;&gt;Learn&lt;/h2&gt;
&lt;p&gt;The general form of the &lt;strong&gt;normal&lt;/strong&gt; probability density function is:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \frac{1}{\sigma \sqrt{2\pi} } e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}
$$&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The parameter $\mu$ is the mean or expectation of the distribution.
$\sigma$ is its standard deviation.
The variance of the distribution is $\sigma^{2}$.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;quiz&#34;&gt;Quiz&lt;/h2&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;What is the parameter $\mu$?&lt;/summary&gt;
  &lt;p&gt;The parameter $\mu$ is the mean or expectation of the distribution.&lt;/p&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://myaseen.github.io/talk/example-talk/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/talk/example-talk/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Wowchemy&amp;rsquo;s &lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further event details, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page elements&lt;/a&gt; such as image galleries, can be added to the body of this page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Blog</title>
      <link>https://myaseen.github.io/post/test/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/post/test/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;First blog&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python for Non-Programmers</title>
      <link>https://myaseen.github.io/post/python_for_non-programmers/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/post/python_for_non-programmers/</guid>
      <description>


&lt;div id=&#34;modules-pip-and-comments&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modules, PIP and Comments&lt;/h1&gt;
&lt;div id=&#34;modules&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modules&lt;/h2&gt;
&lt;p&gt;Modules refers to a file containing &lt;em&gt;Python statements and definitions&lt;/em&gt;. A file containing a python code is called a module. We use modules to break down large programs into small manageable and organized file. In other words, a module is a file containing code written by someone else (usually) which can be imported and used in our program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Built in Modules –&amp;gt; Pre installed in Python -&amp;gt; import module_name&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some examples of built in modules are random, bdb, calendar, os etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;External Modules –&amp;gt; Needs to be installed using PIP -&amp;gt; pip install package_name&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some examples of external modules are Pandas, Matplotlib, NumPy etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;preferred-installer-program-pip&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preferred Installer Program (PIP)&lt;/h2&gt;
&lt;p&gt;PIP is package manager for python packages. If you have Python version 3.4 or later, PIP is included by default. Whenever we wants to install a package we may write like:&lt;/p&gt;
&lt;p&gt;PIP install package_name&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;A Python comment is line of text in a program that is not executed by the interpreter. Comments can be used during debugging to identify issues and to explain code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single Line Comments –&amp;gt; You can write using #&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiple lines Comments –&amp;gt; you can write using ```&lt;code&gt;comment&lt;/code&gt;```&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;print-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Print Function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;print()&lt;/code&gt; function prints the specified message to the screen. The message can be a string, or any other object. The full syntax of &lt;code&gt;print()&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(*objects, sep=&amp;#39; &amp;#39;, end=&amp;#39;\n&amp;#39;, file=sys.stdout, flush=False)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parameters-of-print-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Parameters of Print Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;objects&lt;/strong&gt; - object to be printed. &lt;strong&gt;*&lt;/strong&gt; indicates that there may be more than one object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;sep&lt;/strong&gt; - objects are separated by sep. &lt;strong&gt;Default value&lt;/strong&gt;: &lt;code&gt;&#39; &#39;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;end&lt;/strong&gt; - end is printed at last. Default is ‘\n’ (line feed)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;file&lt;/strong&gt; - must be an object with write(string) method. If omitted, &lt;code&gt;sys.stdout&lt;/code&gt; will be used which prints objects on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;flush&lt;/strong&gt; - If True, the stream is forcibly flushed. &lt;strong&gt;Default value&lt;/strong&gt;: &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;first-python-program&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;First Python Program&lt;/h3&gt;
&lt;p&gt;Let’s write our first python program . Create a file name &lt;strong&gt;name.py&lt;/strong&gt; and write the following code. Execute this (.py file) and you will see the output of your program.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;Hello World!&amp;quot;) # Single Line Comment&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Hello World!&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a=2
print(&amp;#39;a=&amp;#39;, a)  # two objects passed&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a= 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;a&amp;#39;,a, sep=&amp;#39;=====&amp;#39;, end=&amp;#39;&amp;#39;) #with seprator and end parameters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a=====2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;a=&amp;#39;,a, sep=&amp;#39;&amp;#39;, end=&amp;#39;\n\n&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a=2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;a&amp;#39;,a, sep=&amp;#39;=====&amp;#39;, end=&amp;#39;&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a=====2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-python-as-calculator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Python as Calculator&lt;/h2&gt;
&lt;p&gt;We can use Python as a calculator by typing &lt;strong&gt;python + enter&lt;/strong&gt; on the terminal. This will open Read Evaluate Print Loop (REPL) i.e. &amp;gt;&amp;gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;some-arithmetic-operators&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some Arithmetic Operators&lt;/h2&gt;
&lt;table&gt;
&lt;caption&gt;Arithmetic Operators&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Functionality&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;Modulo (yields remainder after division)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;Integer Division (truncates towards zero)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;Exponentiation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;python-code-with-output&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Python Code with Output&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;5/4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1.25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;5%4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;5//4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;5**4&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 625&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;assignment-operators&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Assignment Operators&lt;/h2&gt;
&lt;p&gt;Assignment operators are used in Python to assign values to variables.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;x=2&lt;/td&gt;
&lt;td&gt;x=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;x+=2&lt;/td&gt;
&lt;td&gt;x=x+2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;x-=2&lt;/td&gt;
&lt;td&gt;x=x-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;x*=2&lt;/td&gt;
&lt;td&gt;x=x*2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;x/=2&lt;/td&gt;
&lt;td&gt;x=x/2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;x%=2&lt;/td&gt;
&lt;td&gt;x=x%2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td&gt;x//=2&lt;/td&gt;
&lt;td&gt;x=x//2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;**=&lt;/td&gt;
&lt;td&gt;x**=2&lt;/td&gt;
&lt;td&gt;x=x**2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Assignment can be done on more than one variable “simultaneously” on the same line like this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x,y=1,2
print(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=8
x+=2
print(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x-=3
print(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x%=3
print(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mixing operators between numbers and strings is not supported.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#This will not work
a,b=1,2
c=&amp;quot;String&amp;quot;
print(a+b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a+b+c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conditions-comparison-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conditions / Comparison Operator&lt;/h2&gt;
&lt;p&gt;Python uses boolean logic to evaluate conditions. The boolean values True and False are returned when an expression is compared or evaluated.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;5%&#34; /&gt;
&lt;col width=&#34;64%&#34; /&gt;
&lt;col width=&#34;29%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;If the values of two operands are equal, then the condition becomes true.&lt;/td&gt;
&lt;td&gt;(a == b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;If values of two operands are not equal, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a != b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;lt;&amp;gt;&lt;/td&gt;
&lt;td&gt;If values of two operands are not equal, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a &amp;lt;&amp;gt; b) is true. This is similar to != operator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a &amp;gt; b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a &amp;lt; b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a &amp;gt;= b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than or equal to the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td&gt;(a &amp;lt;= b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;example-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b=(7&amp;gt;4)
c=(7&amp;lt;4)
print(b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=5
print(x==5) # Prints out True&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x==2) # prints out False&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x&amp;gt;3)  # Prints out True&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that variable assignment is done using a single equals operator “=”, whereas comparison between two variables is done using the double equals operator “==”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;logical-operators&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Logical Operators&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;66%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example/Syntax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;Logical AND: True if both the operands are true&lt;/td&gt;
&lt;td&gt;x and y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;Logical OR: True if either of the operands is true&lt;/td&gt;
&lt;td&gt;x or y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;Logical NOT: True if operand is false&lt;/td&gt;
&lt;td&gt;not x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;example-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Bool1= True
Bool2= False
print(&amp;quot;THe value if Bool1 and Bool2 is: &amp;quot;, (Bool1 and Bool2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## THe value if Bool1 and Bool2 is:  False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;THe value if Bool1 or Bool2 is: &amp;quot;, (Bool1 or Bool2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## THe value if Bool1 or Bool2 is:  True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;THe value if not Bool1 is: &amp;quot;, (not Bool1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## THe value if not Bool1 is:  False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;THe value if not Bool2 is: &amp;quot;, (not Bool2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## THe value if not Bool2 is:  True&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-in-operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The “in” Operator&lt;/h2&gt;
&lt;p&gt;The “in” operator could be used to check if a specific object exists within an iterable object container, such as list:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name= &amp;quot;Ahmad&amp;quot;
List = [&amp;quot;Ahmad&amp;quot;, &amp;quot;Nadeem&amp;quot;]
print(name in List) # this print True as Ahmad is in the list&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;input-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Input Function&lt;/h2&gt;
&lt;p&gt;In Python, we use &lt;strong&gt;input()&lt;/strong&gt; function to take input from the user. Whatever you enter as input, the input function &lt;em&gt;converts it into a string&lt;/em&gt;. If you enter an integer value still input() function convert it into a string.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = input(&#34; Please enter your name: &#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print(a) # Try yourself&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;glossary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Glossary&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;algorithm&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A set of specific steps for solving a category of problems.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;bug&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An error in a program.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;comment&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Information in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;debugging&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The process of finding and removing any of the three kinds of programming errors.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;exception&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another name for a runtime error.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;formal language&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Any one of the languages that people have designed for specific purposes, such as representing mathematical ideas or computer programs; all programming languages are formal languages.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;high-level language&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A programming language like Python that is designed to be easy for humans to read and write.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;immediate mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A style of using Python where we type expressions at the command prompt, and the results are shown immediately. Contrast with &lt;strong&gt;script&lt;/strong&gt;, and see the entry under &lt;strong&gt;Python shell&lt;/strong&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;interpreter&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The engine that executes your Python scripts or expressions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;low-level language&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A programming language that is designed to be easy for a computer to execute; also called machine language or assembly language.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;natural language&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Any one of the languages that people speak that evolved naturally.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;object code&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The output of the compiler after it translates the program.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;parse&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;To examine a program and analyze the syntactic structure.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;portability&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A property of a program that can run on more than one kind of computer.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;print function&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A function used in a program or script that causes the Python interpreter to display a value on its output device.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;problem solving&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The process of formulating a problem, finding a solution, and expressing the solution.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;program&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a sequence of instructions that specifies to a computer actions and computations to be performed.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Python shell&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An interactive user interface to the Python interpreter. The user of a Python shell types commands at the prompt (&amp;gt;&amp;gt;&amp;gt;), and presses the return key to send these commands immediately to the interpreter for processing. The word &lt;em&gt;shell&lt;/em&gt; comes from Unix. In the PyScripter used in this RLE version of the book, the Interpreter Window is where we’d do the immediate mode interaction.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An error that does not occur until the program has started to execute but that prevents the program from continuing.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;script&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A program stored in a file (usually one that will be interpreted).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;semantic error&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An error in a program that makes it do something other than what the programmer intended.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;semantics&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The meaning of a program.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;source code&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A program in a high-level language before being compiled.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;syntax&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The structure of a program.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An error in a program that makes it impossible to parse — and therefore impossible to interpret.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;token&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;One of the basic elements of the syntactic structure of a program, analogous to a word in a natural language.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Write a program to &lt;em&gt;print&lt;/em&gt; a multiple lines string in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the Python interpreter, type 1 + 2 and then hit return. Python evaluates this expression, displays the result, and then shows another prompt. * is the multiplication operator, and ** is the exponentiation operator. Experiment by entering different expressions and recording what is displayed by the Python interpreter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type 1 2 and then hit return. Python tries to evaluate the expression, but it can’t because the expression is not syntactically legal. Instead, it shows the error message:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{python, error=TRUE, include=TRUE}    #print(1 2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In many cases, Python indicates where the syntax error occurred, but it is not always right, and it doesn’t give you much information about what is wrong. So, for the most part, the burden is on you to learn the syntax rules.&lt;/p&gt;
&lt;p&gt;In this case, Python is complaining because there is no operator between the numbers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to display a user entered word “Easy” followed by “Python is very” using input() function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type cheese without the quotation marks. This is a run-time error; specifically, it is a NameError, and even more specifically, it is an error because the name cheese is not defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Install&lt;/em&gt; an External Module named &lt;em&gt;pandas.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to &lt;em&gt;print&lt;/em&gt; the &lt;em&gt;contents of a directory&lt;/em&gt; using &lt;em&gt;os&lt;/em&gt; module. Hint: Search online for the function which does so i.e how do i list all files of a directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perform some arithmetic using REPL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use comparison operators to find out whether a given variable ‘a’ is greater than ‘b’ or not. consider a=45 and b=35.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to find out average of two numbers entered by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program which accepts the radius of a circle from the user and compute the area.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to find the reminder of a given number?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;variables-and-data-types&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Variables and Data Types&lt;/h1&gt;
&lt;div id=&#34;variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variable&lt;/h2&gt;
&lt;p&gt;A Python variable is a reserved memory location to store values. In other words, a variable in a python program gives data to the computer for processing.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;58%&#34; /&gt;
&lt;col width=&#34;41%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Words&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Variable&lt;/td&gt;
&lt;td&gt;Container to store a value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Keywords (can’t be used a variable name)&lt;/td&gt;
&lt;td&gt;Reserved Words in Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Identifiers&lt;/td&gt;
&lt;td&gt;Class/Function/Variable Name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;keywords&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Keywords&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;help(&amp;quot;keywords&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Here is a list of the Python keywords.  Enter any keyword to get more help.
## 
## False               class               from                or
## None                continue            global              pass
## True                def                 if                  raise
## and                 del                 import              return
## as                  elif                in                  try
## assert              else                is                  while
## async               except              lambda              with
## await               finally             nonlocal            yield
## break               for                 not&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;variable-types-in-python&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variable Types in Python&lt;/h2&gt;
&lt;p&gt;Every value in Python has a datatype. Different data types in Python are Integers, Floating point numbers, Strings, Boolean, List, Tuple, Dictionary, etc. Variables in Python can be declared by any name or even alphabets like a, aa, abc, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A variable name can contain alphabets, digits and underscores&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A variable name can start with alphabets or an underscore&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable name is case sensitive&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A variable name can’t start with a number/digit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spaces are not allowed in variable name&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;how-to-declare-and-use-a-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;How to Declare and Use a Variable&lt;/h3&gt;
&lt;p&gt;Let see an example. We will define variable in Python and declare it as “a” and print it.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a=10
print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x , y = 5 ,6
print(x,y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b=c=d=30
print(b,c,d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 30 30 30&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-know-the-type-of-a-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;How to know the Type of a Variable&lt;/h3&gt;
&lt;p&gt;Python is completely object oriented, and not “statically typed”. You do not need to declare variables before using them, or declare their type, i.e. python automatically identify the type. Every variable in Python is an object.&lt;/p&gt;
&lt;p&gt;Here are few basic types of variables. type() function is used to find out the type of a variable.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a=10
print(type(a))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b=10.1
print(type(b))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c=&amp;quot;State Bank of Pakistan&amp;quot;
print(type(c))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d=True
print(type(d))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;bool&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;e=None
print(type(e))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;re-declare-a-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Re-declare a Variable&lt;/h3&gt;
&lt;p&gt;You can re-declare Python variables even after you have declared once.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#declare a variable and initialize it
a=10
# re-declaring the variable 
a=&amp;quot;State Bank of Pakistan&amp;quot;
print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## State Bank of Pakistan&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;a&amp;quot;+10) # we can&amp;#39;t concatenate string with integer&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;a&amp;quot; + &amp;quot;10&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;type-casting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Type Casting&lt;/h3&gt;
&lt;p&gt;Type Casting is a process in which we convert a literal of one type to another. built-in functions int(), float() and str() shall be used for typecasting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int() can take a float or string literal as argument and returns a value of &lt;code&gt;class &#39;int&#39;&lt;/code&gt; type.&lt;/li&gt;
&lt;li&gt;float() can take an int or string literal as argument and returns a value of &lt;code&gt;class &#39;float&#39;&lt;/code&gt; type.&lt;/li&gt;
&lt;li&gt;str() can take a float or int literal as argument and returns a value of &lt;code&gt;class &#39;str&#39;&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;type-casting-int-to-float-and-string&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Type Casting int to float and string&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;n=100 # an integer
print(type(n))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;f=float(n)
print(type(f))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s=str(n)
print(type(s))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;type-casting-float-to-int-and-string&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Type Casting float to int and string&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;f=10.5 #a float
print(type(f))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;n=int(f)
print(type(n))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s=str(f)
print(type(s))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Guess the type of 6/2, 6//2 and check the results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the value of x after the following is run:&lt;br /&gt;
&lt;br /&gt;
x=4&lt;br /&gt;
&lt;br /&gt;
x=x/2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a variable named &lt;code&gt;carname&lt;/code&gt; and assign the value &lt;code&gt;toyota&lt;/code&gt; to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assign: 3 to variable glass_of_water and printout the message “I drank 3 glasses of water today” by using variable name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s try to see what happens after assigning a new value to our variable. Note that program gets executed line by line.&lt;/p&gt;
&lt;p&gt;glass_of_water=3&lt;/p&gt;
&lt;p&gt;glass_of_water=glass_of_water + 1&lt;/p&gt;
&lt;p&gt;print()&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the type of the variable define above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Cast the above variable first into float and then to string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define a variable a =3 and A=‘NIBAF’. Will ‘A’ overwrite ‘a’?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the type of a variable assigned using input() function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculate square of the number entered by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to accept two numbers from the user and calculate multiplication.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display string “My”, ‘Name’, “Is”, “Python” as “My**Name**Is**Python” Hint: Default separator in print function is space i.e. ” “.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to take three names as input from a user in the single &lt;code&gt;input()&lt;/code&gt; function call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define a complex variable. 😎&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;strings&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Strings&lt;/h1&gt;
&lt;p&gt;A string is a sequence of characters. Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable. For example −&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var1 = &amp;#39;Hello World!&amp;#39;
var2 = &amp;quot;Python Programming&amp;quot;
var3 = &amp;#39;&amp;#39;&amp;#39;Python Programming
          for begginners&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;string-indexing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Indexing&lt;/h2&gt;
&lt;p&gt;Individual characters of a string can be accessed directly using a numeric index.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;String indexing in python is zero-based.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first character in the string has index 0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next has index 1 . . . and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The index of the last character will be length of the string minus 1.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;example-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;String&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;h&lt;/th&gt;
&lt;th&gt;m&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;Index&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;Negative Index&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;td&gt;-4&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;slicing-strings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slicing Strings&lt;/h2&gt;
&lt;p&gt;You can return a range of characters by using the slice syntax. Specify the start index and the end index, separated by a colon in &lt;span class=&#34;math display&#34;&gt;\[ \]&lt;/span&gt;, to return a part of the string. i.e. we can get a part of the string using slicing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;syntax-start-stop-step&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Syntax : &lt;span class=&#34;math display&#34;&gt;\[Start : Stop : Step\]&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start&lt;/strong&gt;: First Index of the sub-string you want to extract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stop&lt;/strong&gt;: Last Index of the sub-string you want to extract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step&lt;/strong&gt;: The size of the jump you want to take while extracting the subsection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;scenarios&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scenarios&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Scenario 1: No step size&lt;/code&gt; &lt;code&gt;Scenario 2: No stop index&lt;/code&gt; &lt;code&gt;Scenario 3: No start index&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scenario 4: No start and stop index&lt;/code&gt; &lt;code&gt;Scenario 5: No strat, step or stop index&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scenario 6: Single charachter as a string&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;example-4&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = &amp;quot;Welcome to the World of Python&amp;quot;
print(A[3:7]) # by default step size is 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## come&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(A[24:]) # python will assume last index of string as the stop index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Python&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(A[:7])  #python assume the start index as 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(A[::2]) # python will give every second chanracter from complete string&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Wloet h ol fPto&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(A[::])  # start=0, stop=last index, step=1 by deafult&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome to the World of Python&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(A[0:1]) # [start:start+1:1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## W&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Omitting both indices returns the original string, in its entirety. Literally. It’s not a copy, it’s a reference to the original string:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s=&amp;#39;NIBAF&amp;#39;
t = s[:]
print(id(s))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1494262832&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(id(t))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1494262832&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;concatenating-the-strings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Concatenating the Strings&lt;/h2&gt;
&lt;p&gt;String concatenation means add strings together. Use the + character to add a variable to another variable:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = &amp;quot;Python Eats&amp;quot;
y= &amp;quot;???&amp;quot;
z = x+y
print(z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Python Eats???&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;string-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String Functions&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;77%&#34; /&gt;
&lt;col width=&#34;14%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;capitalize()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The capitalize() method converts first character of a string to uppercase letter and lowercases all other characters, if any&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;pre&gt;&lt;code&gt;string.capitalize()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;upper()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;upper()&lt;/code&gt; method converts all lowercase characters in a string into uppercase characters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.upper()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;lower()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;lower()&lt;/code&gt; method converts all uppercase characters in a string into lowercase characters&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.lower()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;swapcase()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;swapcase&lt;/code&gt; method converts lower to uppar and upper to lower&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.swapcase&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;count()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;count()&lt;/code&gt; method returns the number of occurrences of a &lt;strong&gt;substring&lt;/strong&gt; in the given string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.count()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;endswith()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;T&lt;/strong&gt;he &lt;code&gt;endswith()&lt;/code&gt; method returns &lt;code&gt;True&lt;/code&gt; if a string ends with the specified suffix. If not, it returns &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.endswith()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;find()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;find()&lt;/code&gt; method returns the index of &lt;em&gt;first occurrence&lt;/em&gt; of the &lt;strong&gt;substring&lt;/strong&gt; (if found). If not found, it returns -1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.find()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;len()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;len()&lt;/code&gt; method returns the length of a string&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.len()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;index()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;index()&lt;/code&gt; method returns the index of &lt;em&gt;first occurrence&lt;/em&gt; of the &lt;strong&gt;substring&lt;/strong&gt; (if found). If not found, it returns substring not found&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.index()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;replace()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The &lt;code&gt;replace()&lt;/code&gt; method replaces each matching occurrence of the old character/text in the string with the new character/text&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.replace()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;strip()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Removes &lt;strong&gt;leading and trailing characters&lt;/strong&gt; from a string.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.strip()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;lstrip()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Removes &lt;strong&gt;leading characters&lt;/strong&gt; from a string.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.lstrip()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rstrip()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Removes &lt;strong&gt;trailing characters&lt;/strong&gt; from a string.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.rstrip()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;join()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Joins elements of an &lt;strong&gt;iterable&lt;/strong&gt; into a &lt;strong&gt;single string&lt;/strong&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.join()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;split&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Splits&lt;/strong&gt; a string into a list of &lt;strong&gt;substrings&lt;/strong&gt; based on separator&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;string.split()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = &amp;quot;    Python is Easy   &amp;quot;
b = &amp;quot;:&amp;quot;.join([&amp;quot;Ahmad&amp;quot;, &amp;quot;Nadeem&amp;quot;])
c = &amp;quot;Ahmad Nadeem&amp;quot;.split()
print(a.upper())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     PYTHON IS EASY&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.endswith(&amp;#39;y&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.find(&amp;#39;n&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.replace(&amp;quot;Python&amp;quot; , &amp;quot;Jython&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Jython is Easy&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.strip())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Python is Easy&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Ahmad:Nadeem&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Ahmad&amp;#39;, &amp;#39;Nadeem&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;escape-sequence-characters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Escape Sequence Characters&lt;/h2&gt;
&lt;p&gt;In Python, escape sequences are indicated by a backslash ( \ ).&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;92%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;\n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;The most important one may be &lt;code&gt;\n&lt;/code&gt; which indicates a new line. Like so, multiple logical lines can be stacked into a single physical line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;\’&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Another escape sequence worth mentioning is &lt;code&gt;\&#39;&lt;/code&gt; for a single quote within a &lt;a href=&#34;https://www.spss-tutorials.com/spss-string-variables-basics/&#34;&gt;string&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;\\&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A backslash also escapes itself so if it’s really a backslash you want, double it as in &lt;code&gt;\\&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;\t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;insert a tab in a string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;formatted-string-literal-or-f-string&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Formatted String Literal or f-string&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;n = 5
m = 10
prod = n*m
print(&amp;#39;The product of&amp;#39;, n, &amp;#39;and&amp;#39;, m, &amp;#39;is&amp;#39;, prod)

# this can be reproduced by using f-string as:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The product of 5 and 10 is 50&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(f&amp;#39;The product of {n} and {m} is {prod}&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The product of 5 and 10 is 50&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Convert the String &lt;code&gt;&#34;welcome to the beautiful world of python&#34;&lt;/code&gt; to &lt;code&gt;&#34;Welcome To The Beautiful World Of Python&#34;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the output of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str1 = &amp;quot;PYnative&amp;quot;
print(str1[1:4], str1[:5], str1[4:], str1[0:-1], str1[:-1])&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Guess the output of the following:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# print(&amp;#39;python \n cpython&amp;#39;)
# print(&amp;#39;python \t cpython&amp;#39;)
# print(&amp;#39;python \\ cpython&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if a=‘1’ and b=‘2’ what will be the value of c=a+b?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider the variable &lt;strong&gt;g&lt;/strong&gt;, and find the first index of the sub-string &lt;strong&gt;snow&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;g = “Mary had a little lamb Little lamb, little lamb Mary had a little lamb \ Its fleece was white as snow And everywhere that Mary went Mary went, Mary went \ Everywhere that Mary went The lamb was sure to go”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the above variable &lt;strong&gt;g&lt;/strong&gt;, replace the sub-string &lt;strong&gt;Mary&lt;/strong&gt; with &lt;strong&gt;Bob&lt;/strong&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the result of following?&lt;br /&gt;
“hello Mike”.find(“Mike”)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If string=‘Welcome’ then how to get output as WelcomeWelcomeWelcome?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask the name and favorite fruit from two persons using input and return as a single string. like: Ahmad likes Mangoes and Muhammad likes Oranges.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to detect double spaces in a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replace the double spaces in above question with a single space.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to format the following letter using escape sequence characters.&lt;/p&gt;
&lt;p&gt;letter = ” Dear Participants, This Python course is nice. Thanks!”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the length of the word NIBAF.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Print the reversed str = ‘NIBAF’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attempt to index beyond the end of the string results and checkout the result. like ,‘Ahmad&lt;span class=&#34;math display&#34;&gt;\[6\]&lt;/span&gt;’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the every third letter from the str = ‘I am learning python’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to check the given word, sentence or a number is palindrome!&lt;/p&gt;
&lt;p&gt;A word, verse, or sentence (such as ‘Able was I ere I saw Elba’) or a number (such as 1881) that reads the same backward or forward is called palindrome.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program which accepts the user’s first and last name then print in reverse order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to accept a filename from user and print the name and extension of that file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;lists-and-tuples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lists and Tuples&lt;/h1&gt;
&lt;p&gt;List is one of the most powerful data structures in Python. The List data type is made with so much of efforts and every programmer from beginner, intermediate to an expert should understand how it works.&lt;/p&gt;
&lt;p&gt;Lists are &lt;strong&gt;mutable&lt;/strong&gt; collection of objects. i.e. they are container to store a set of values of any data type.&lt;/p&gt;
&lt;p&gt;for example:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList = [ &amp;#39;milk&amp;#39;, &amp;#39;cars&amp;#39;, 14, False]&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lists are ordered. We can index them and access values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lists are heterogeneous. A list can contain different types of elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lists are mutable. You can change values in them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;creating-a-lists&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a Lists&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;items = [1,2,3]
items1 = list(&amp;#39;123&amp;#39;)
items2=[&amp;#39;123&amp;#39;]
items3=[]
items3.append(7)
items2.append(8) # adds at the end of the list
items4=[1, 2, False, [4,5]]
print(items, items1, items2, items3, items4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3] [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;] [&amp;#39;123&amp;#39;, 8] [7] [1, 2, False, [4, 5]]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;indexing-and-slicing-lists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Indexing and Slicing Lists&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList = [&amp;#39;milk&amp;#39;, &amp;#39;cars&amp;#39;, 14, False]
myList[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;milk&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList[-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList[0::2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;milk&amp;#39;, 14]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;modifying-lists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Modifying Lists&lt;/h3&gt;
&lt;p&gt;Unlike strings, lists are mutable. Its values can be changed.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList = [&amp;#39;milk&amp;#39;, &amp;#39;cars&amp;#39;, 14, False]
myList[1] = &amp;#39;Trucks&amp;#39;
myList&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;milk&amp;#39;, &amp;#39;Trucks&amp;#39;, 14, False]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;myList.insert(2,9)
myList&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;milk&amp;#39;, &amp;#39;Trucks&amp;#39;, 9, 14, False]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;sorting-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sorting List&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;list.sort()&lt;/code&gt; method sorts the elements of a list in ascending or descending order:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a= [4,1,2,7,5,3]
a.sort()
print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 7]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.sort(reverse=True)
print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [7, 5, 4, 3, 2, 1]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;sorting-using-a-key-parameters&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sorting using a key parameters:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities = [&amp;#39;Karachi&amp;#39;, &amp;#39;Lahore&amp;#39;, &amp;#39;Faisalabad&amp;#39;, &amp;#39;Hayderababd&amp;#39;]
cities.sort(key=len)
print(cities)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Lahore&amp;#39;, &amp;#39;Karachi&amp;#39;, &amp;#39;Faisalabad&amp;#39;, &amp;#39;Hayderababd&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities.sort(key=len, reverse=True)
print(cities)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Hayderababd&amp;#39;, &amp;#39;Faisalabad&amp;#39;, &amp;#39;Karachi&amp;#39;, &amp;#39;Lahore&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;removing-elements-from-the-list&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Removing Elements from the list&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities = [&amp;#39;Karachi&amp;#39;, &amp;#39;Lahore&amp;#39;, &amp;#39;Faisalabad&amp;#39;, &amp;#39;Hayderababd&amp;#39;]
cities.pop(0) # will delete the value at index 0 an return its value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Karachi&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Lahore&amp;#39;, &amp;#39;Faisalabad&amp;#39;, &amp;#39;Hayderababd&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities.remove(&amp;#39;Lahore&amp;#39;)
cities&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Faisalabad&amp;#39;, &amp;#39;Hayderababd&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;cities2= cities.copy() #create a copy of list&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;converting-a-string-to-a-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Converting a String to a List&lt;/h2&gt;
&lt;p&gt;String can be convert to a list, as per spaces ” ” or any other special characters “_”, according to the users choice, are encountered. To do this we use the split() method.&lt;/p&gt;
&lt;div id=&#34;syntax&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;string.split(&#39;delimiter&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;string = &amp;quot;I like Python&amp;quot;
print(string.split(&amp;quot; &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;I&amp;#39;, &amp;#39;like&amp;#39;, &amp;#39;Python&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;string1 = &amp;quot;I_Like_Python&amp;quot;
print(string1.split(&amp;quot;_&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;I&amp;#39;, &amp;#39;Like&amp;#39;, &amp;#39;Python&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tuples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tuples&lt;/h2&gt;
&lt;p&gt;Tuples are collections of Python objects. They are similar to lists but the difference between them is that &lt;strong&gt;tuples are immutable&lt;/strong&gt; while &lt;strong&gt;lists are mutable&lt;/strong&gt;. Tuples are created by typing a sequence of items, separated by &lt;em&gt;commas&lt;/em&gt;. Optionally, you can put the comma-separated values in parenthesis.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Tuple1=(1,2,5,6)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuple2=(‘a’, “b”, ‘c’, “d”)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuple3 = () #empty tuple&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuple4 = 5,3,1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuple5 = (“London”, “Tokyo”, “Korea”, 1986, 1640, 1948)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To create a single item tuple, you have to use a comma after the value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Tup1 = (5) # its not a tuple
Tup2 = (5,)
Tuple5 = (&amp;quot;London&amp;quot;, &amp;quot;Tokyo&amp;quot;, &amp;quot;Korea&amp;quot;, 1986, 1640, 1948)
print(type(Tup1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(type(Tup2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Tuple5.index(&amp;quot;Korea&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values of &lt;strong&gt;tuples&lt;/strong&gt; are stored at different index positions starting from zero. We can access the values by using their index positions inside square brackets. We can index or slice tuples like lists.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = (1, 2, 2, 1, 3, 1, 4,2)

print(a[0]) , print(a[4])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1
## 3
## (None, None)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.count(2)) # will return the number of times 2 occurs&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a.index( 2)) # will return the index of first occurrence of 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tuple-unpacking&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tuple Unpacking&lt;/h2&gt;
&lt;p&gt;With a special syntax, Python can &lt;strong&gt;unpack&lt;/strong&gt; the values of a tuple and extract them into &lt;strong&gt;single variables&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a,b,c = (1,2,3)
print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(c)
 #or&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;coordinates = (4,5,6)
x,y,z = coordinates # same can be used to unpack a list
print(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number of variables to the left and right side should be the same and it assigns each variable respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lists-vs-tuples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Lists Vs Tuples&lt;/h2&gt;
&lt;div id=&#34;methods-available-for-list&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Methods Available for List:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list = [2,3,5,7,11,13,17]
print(dir(list))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__class_getitem__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__delitem__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__iadd__&amp;#39;, &amp;#39;__imul__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__reversed__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__setitem__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;append&amp;#39;, &amp;#39;clear&amp;#39;, &amp;#39;copy&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;extend&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;insert&amp;#39;, &amp;#39;pop&amp;#39;, &amp;#39;remove&amp;#39;, &amp;#39;reverse&amp;#39;, &amp;#39;sort&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;methods-available-for-tuple&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Methods Available for Tuple:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tuple = (1,4,9,16,25,36)
print(dir(tuple))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;__add__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__class_getitem__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;index&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we observe that list have more methods as compare with tuples, but this extra functionality comes at a price i.e. list occupy more memoray than tuple. let’s have a look:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import sys
print(help(sys.getsizeof))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Help on built-in function getsizeof in module sys:
## 
## getsizeof(...)
##     getsizeof(object [, default]) -&amp;gt; int
##     
##     Return the size of object in bytes.
## 
## None&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list  = [1,2,3,4,5,6,7]
tuple = (1,2,3,4,5,6,7)
print(&amp;quot;The Size of the List  is&amp;quot;, sys.getsizeof(list ), &amp;#39;bytes&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The Size of the List  is 120 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;The Size of the Tuple is&amp;quot;, sys.getsizeof(tuple), &amp;#39;bytes&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The Size of the Tuple is 96 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when working with big data, this can be significant.&lt;/p&gt;
&lt;table style=&#34;width:57%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;31%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;List&lt;/th&gt;
&lt;th&gt;Tuples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Add Data&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Can’t be changed&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Remove Data&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Immutable&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Change Data&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Made Quickly&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;let’s have a look that how tuples are more efficient than lists:&lt;/p&gt;
&lt;p&gt;time required to create 1000,000 lists and tuples of same size.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import timeit
list_test = timeit.timeit(stmt=&amp;quot;[1,2,3,4,5,6]&amp;quot;, number=1000_000)
tuple_test = timeit.timeit(stmt=&amp;quot;(1,2,3,4,5,6)&amp;quot;, number=1000_000)
print(&amp;#39;Time needed to make 1000000 lists: &amp;#39;, list_test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time needed to make 1000000 lists:  0.03869019995909184&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;Time needed to make 1000000 tuples: &amp;#39;, tuple_test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time needed to make 1000000 tuples:  0.006439999910071492&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a list &lt;code&gt;a_list&lt;/code&gt;, with the following elements &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;[1,2,3]&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the first and last value of the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the value stored at index 1 of &lt;code&gt;a_list&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Retrieve the elements stored at index 1, 2 and 3 of &lt;code&gt;a_list&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concatenate the following lists &lt;code&gt;A = [1, &#39;a&#39;]&lt;/code&gt; and &lt;code&gt;B = [2, 1, &#39;d&#39;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the list of the PIN of 5 officers and sort them in ascending and descending order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider the following tuple and Find the length of the tuple, &lt;code&gt;genres_tuple&lt;/code&gt; genres_tuple = (“pop”, “rock”, “soul”, “hard rock”, “soft rock”, “R&amp;amp;B”, “progressive rock”, “disco”)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access the element, with respect to index 3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use slicing to obtain indexes 3, 4 and 5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the index of &lt;code&gt;&#34;disco&#34;.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate a sorted List from the Tuple &lt;code&gt;C_tuple=(-5, 1, -3).&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check that a python tuple can’t be altered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the sum of &lt;code&gt;list2 = [1,2,3,4]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to count the number of occurrences of 4 in &lt;code&gt;tuple1=(4,1,2,5,7,4,8,4,4)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reverse a list2 define above (Q.13) using index method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the list of the words of “I am doing well”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sort the above created list as per length of the words in reverse order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list1 = &lt;code&gt;[100, 200, 300, 400, 500]&lt;/code&gt;, output = &lt;code&gt;[500,400,300,200,100]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list2 = &lt;code&gt;[10, 20, [300, 400, [5000, 6000], 500], 30, 40]&lt;/code&gt;, Expected output :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list1 = &lt;code&gt;[&#34;a&#34;, &#34;b&#34;, [&#34;c&#34;, [&#34;d&#34;, &#34;e&#34;, [&#34;f&#34;, &#34;g&#34;], &#34;k&#34;], &#34;l&#34;], &#34;m&#34;, &#34;n&#34;]&lt;/code&gt; # sub list to add &lt;code&gt;sub_list = [&#34;h&#34;, &#34;i&#34;, &#34;j&#34;]&lt;/code&gt; Expected Output:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&#34;a&#34;, &#34;b&#34;, [&#34;c&#34;, [&#34;d&#34;, &#34;e&#34;, [&#34;f&#34;, &#34;g&#34;,&#34;h&#34;,&#34;i&#34;,&#34;j&#34;], &#34;k&#34;], &#34;l&#34;], &#34;m&#34;, &#34;n&#34;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list1 = &lt;code&gt;[5, 10, 15, 20, 25, 50, 20]&lt;/code&gt; Expected Output: &lt;code&gt;[5, 10, 15, 200, 25, 50, 20]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list1 = &lt;code&gt;[5, 20, 15, 200, 25, 50, 220]&lt;/code&gt; remove 20 from the list.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;python-dictionaries-and-sets&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Python Dictionaries and Sets&lt;/h1&gt;
&lt;div id=&#34;dictionaries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dictionaries&lt;/h2&gt;
&lt;p&gt;Like a real-life dictionary has &lt;strong&gt;words&lt;/strong&gt; and &lt;strong&gt;meanings&lt;/strong&gt;, Python dictionaries have &lt;strong&gt;keys&lt;/strong&gt; and &lt;strong&gt;values&lt;/strong&gt;. Dictionaries in Python are collections that are &lt;em&gt;unordered&lt;/em&gt;, i&lt;em&gt;ndexed and mutable&lt;/em&gt;. They hold keys and values.&lt;/p&gt;
&lt;p&gt;They are in &lt;em&gt;curly brackets&lt;/em&gt;. Key-value pairs are &lt;strong&gt;separated by commas&lt;/strong&gt; and &lt;em&gt;keys and values&lt;/em&gt; are &lt;strong&gt;separated by colons&lt;/strong&gt;. Keys in dictionaries are &lt;em&gt;unique&lt;/em&gt; and &lt;em&gt;immutable&lt;/em&gt;. You can search for a value &lt;em&gt;if you know the key&lt;/em&gt;. &lt;strong&gt;One key cannot have two values&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Financial_Dictionary = {&amp;quot;Key&amp;quot;: &amp;quot;Value&amp;quot;, &amp;quot;Key&amp;quot;: &amp;quot;Value1&amp;quot;, &amp;quot;SBP&amp;quot; : &amp;quot;State Bank of Pakistab&amp;quot;, &amp;quot;BSC&amp;quot; : &amp;quot;Banking Services Corporation&amp;quot;, &amp;quot;PSPC&amp;quot; : &amp;quot;Pakistan Security Printing Corporation&amp;quot;, &amp;quot;NIBAF&amp;quot; : &amp;quot;National Institute of Banking and Finance&amp;quot;, &amp;#39;Marks&amp;#39; : [71, 78, 84]}
print(type(Financial_Dictionary))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Financial_Dictionary)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;Key&amp;#39;: &amp;#39;Value1&amp;#39;, &amp;#39;SBP&amp;#39;: &amp;#39;State Bank of Pakistab&amp;#39;, &amp;#39;BSC&amp;#39;: &amp;#39;Banking Services Corporation&amp;#39;, &amp;#39;PSPC&amp;#39;: &amp;#39;Pakistan Security Printing Corporation&amp;#39;, &amp;#39;NIBAF&amp;#39;: &amp;#39;National Institute of Banking and Finance&amp;#39;, &amp;#39;Marks&amp;#39;: [71, 78, 84]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Financial_Dictionary[&amp;#39;Marks&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [71, 78, 84]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;del(Financial_Dictionary[&amp;#39;BSC&amp;#39;]) # will del key=BSC
print(Financial_Dictionary)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;Key&amp;#39;: &amp;#39;Value1&amp;#39;, &amp;#39;SBP&amp;#39;: &amp;#39;State Bank of Pakistab&amp;#39;, &amp;#39;PSPC&amp;#39;: &amp;#39;Pakistan Security Printing Corporation&amp;#39;, &amp;#39;NIBAF&amp;#39;: &amp;#39;National Institute of Banking and Finance&amp;#39;, &amp;#39;Marks&amp;#39;: [71, 78, 84]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;BSC&amp;#39; in Financial_Dictionary) # as it already deleted , Results in False&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;nested-dictionaries-and-dictionary-methods&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nested Dictionaries and Dictionary Methods&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Dict = {&amp;#39;1&amp;#39; : &amp;#39;One&amp;#39;, &amp;#39;2&amp;#39;:&amp;#39;Two&amp;#39;, &amp;quot;Dict1&amp;quot; : {&amp;#39;3&amp;#39;: &amp;#39;Three&amp;#39;, &amp;#39;4&amp;#39; : &amp;#39;Four&amp;#39;} }
print(Dict[&amp;#39;1&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## One&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict[&amp;#39;Dict1&amp;#39;][&amp;#39;4&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Four&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Dict[&amp;#39;1&amp;#39;] = &amp;#39;i&amp;#39; # Immutable i.e. we can change 
print(Dict)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;1&amp;#39;: &amp;#39;i&amp;#39;, &amp;#39;2&amp;#39;: &amp;#39;Two&amp;#39;, &amp;#39;Dict1&amp;#39;: {&amp;#39;3&amp;#39;: &amp;#39;Three&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;Four&amp;#39;}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict.keys()) # will show the keys of a dictionary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_keys([&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;Dict1&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict.values()) #will show the value of a dictionary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_values([&amp;#39;i&amp;#39;, &amp;#39;Two&amp;#39;, {&amp;#39;3&amp;#39;: &amp;#39;Three&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;Four&amp;#39;}])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict.items()) # print the (key : value) for all contents of Dictionary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;1&amp;#39;, &amp;#39;i&amp;#39;), (&amp;#39;2&amp;#39;, &amp;#39;Two&amp;#39;), (&amp;#39;Dict1&amp;#39;, {&amp;#39;3&amp;#39;: &amp;#39;Three&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;Four&amp;#39;})])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;new_dict = {&amp;#39;Hello&amp;#39; : &amp;#39;World&amp;#39;}
Dict.update(new_dict) # will append new_dict in Dict
print(Dict)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;1&amp;#39;: &amp;#39;i&amp;#39;, &amp;#39;2&amp;#39;: &amp;#39;Two&amp;#39;, &amp;#39;Dict1&amp;#39;: {&amp;#39;3&amp;#39;: &amp;#39;Three&amp;#39;, &amp;#39;4&amp;#39;: &amp;#39;Four&amp;#39;}, &amp;#39;Hello&amp;#39;: &amp;#39;World&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict[&amp;#39;9&amp;#39;]) # returns error if not in Dict&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): KeyError: &amp;#39;9&amp;#39;
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(Dict.get(&amp;#39;9&amp;#39;)) # return None&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## None&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quick Quiz: Write a program to ask a phone number in digits and translate them like: 123 One Two Three.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;p&gt;Solution! (Click for Solution)&lt;/p&gt;
&lt;/summary&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Phone = input (&amp;quot;Number Please: &amp;quot;)
phone = &amp;quot;123&amp;quot;
Digit_Dict = {
    &amp;quot;1&amp;quot; : &amp;quot;One&amp;quot;,
    &amp;quot;2&amp;quot; : &amp;quot;Two&amp;quot;,
    &amp;quot;3&amp;quot; : &amp;quot;Three&amp;quot;,
    &amp;quot;4&amp;quot; : &amp;quot;Four&amp;quot;
}
output = &amp;quot;&amp;quot;
for numbers in phone:
    output += Digit_Dict.get(numbers, &amp;quot;!&amp;quot;) + &amp;quot; &amp;quot;
print(output)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## One Two Three&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Quick Quiz: Get a message from input method and resturn the same message with translated emoji like “:)” to 😊.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#message = input(&amp;quot;&amp;gt;&amp;quot;)
message = &amp;quot;I am happy :)&amp;quot;
words = message.split()
# print(words)
emoji_dict = {
     &amp;quot;:)&amp;quot; : &amp;quot;😊&amp;quot;,
     &amp;quot;:(&amp;quot; : &amp;quot;😒&amp;quot;
 }
trans_message = &amp;quot;&amp;quot; 
for word in words:
    trans_message += emoji_dict.get(word, word)+ &amp;quot; &amp;quot;
print(trans_message)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## I am happy 😊&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sets&lt;/h2&gt;
&lt;p&gt;Sets in Python are a collection of unordered and unindexed Python objects. Sets are mutable, iterable and they do not contain duplicate values. It is similar to the concept of the mathematical set. That is, set is a collection of non-repetitive elements. The elements in a set are declared inside curly braces separated by commas.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = {2,1,3,4,2,5,6,3,8}
type(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;set&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {1, 2, 3, 4, 5, 6, 8}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b = {}  # check the type of a
c = set() # an empty set
type(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;set&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c.add (2)
c.add (5)
print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {2, 5}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the sets are &lt;em&gt;unindexed&lt;/em&gt;, we &lt;em&gt;cannot use slicing or indexing&lt;/em&gt; on sets, it will give us a TypeError error when using indexing.&lt;/p&gt;
&lt;div id=&#34;properties-of-sets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Properties of Sets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sets are Unordered&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sets are Unindexed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no way to change items in a set&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sets can’t contain duplicate values&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;operations-on-sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Operations on Sets&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;17%&#34; /&gt;
&lt;col width=&#34;82%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Col1&lt;/th&gt;
&lt;th&gt;Col2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;set.add( n)&lt;/td&gt;
&lt;td&gt;The add() function in python sets takes the value as an argument which we want to add to our set and adds the element in our set. one element at a time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;set. remove ( m )&lt;/td&gt;
&lt;td&gt;The function deletes the specified element from the set and if the element is not present in the set, it does not return any error.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;set. pop ( )&lt;/td&gt;
&lt;td&gt;pop() function doesn’t take any argument and it removes an arbitrary element from the set and also returns the deleted element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;set. clear( )&lt;/td&gt;
&lt;td&gt;The clear() function empties the set. It can also be used for dictionaries.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;set.update( )&lt;/td&gt;
&lt;td&gt;The update() function in python sets can be used to add multiple values to the set at once. It takes an iterable like lists, set or tuple as an argument.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;set.union ({4,5})&lt;/td&gt;
&lt;td&gt;Return a new set with all item from both sets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;set.intersection({7,8})&lt;/td&gt;
&lt;td&gt;Return a set contains common item of both sets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;set1.difference(set2)&lt;/td&gt;
&lt;td&gt;Return the Set1 - Set2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;set1.symmetric_difference(set2)&lt;/td&gt;
&lt;td&gt;return the elements those are not common in set1 and set2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;set1.issubset(set2)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c = {1,2,3}
c.add([1,2,3]) # we can&amp;#39;t add list and dictionaries in a set&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unhashable type: &amp;#39;list&amp;#39;
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c.add((1,2,3))# we can add tuple 
print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {1, 2, 3, (1, 2, 3)}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(len(c)) # prints the length of set c&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c.remove(2)  # removes 2 from  set c
print(c) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {1, 3, (1, 2, 3)}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(c.pop()) # removes any arbitrary number from  set c and return the value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {3, (1, 2, 3)}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c.update({8,9})
print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {3, 8, 9, (1, 2, 3)}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The Swift, City and Civic have the following prices in thousands 2800, 3500, 6200 respectively. Create a dictionary &lt;code&gt;car_price_dict&lt;/code&gt; where the keys are the car name and the price in thousands are the values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will need this dictionary for the next two questions: Dict= {‘SBP_ACT’: ‘1956’, ‘BCO’:‘1962’}&lt;/p&gt;
&lt;p&gt;In the Dict, what are the keys?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Dict, what are the values?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the dictionary find the price of the City.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the names of the cars from the dictionary using the method &lt;code&gt;keys()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the prices of the cars from the dictionary using the method &lt;code&gt;values()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a dictionary of Urdu words with values as their English translation. Provide user an option to look it up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider the list &lt;code&gt;A = [1, 2, 2, 1]&lt;/code&gt; and set &lt;code&gt;B = set([1, 2, 2, 1])&lt;/code&gt;, does &lt;code&gt;sum(A) == sum(B)&lt;/code&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new set &lt;code&gt;C&lt;/code&gt; that is the union of sets &lt;code&gt;A={1, 2, 3, 4}&lt;/code&gt; and &lt;code&gt;B={3, 4, 5, 6}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find out if &lt;code&gt;A&lt;/code&gt; is a subset of &lt;code&gt;C.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to add an element in a set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to add &lt;strong&gt;more than one element&lt;/strong&gt; in a set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to remove items from a given set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to create an intersection of set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to create a union of sets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to input 5 numbers from the user and display all the unique numbers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can we have a set with elements 3 and ‘3’ ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the type of s = { }?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What will be the length of set s:&lt;/p&gt;
&lt;p&gt;s = set(), s.add(1), s.add(1.0), s.add(‘1’)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a dictionary. Allow 4 users to enter their favorite Fruits as value , ans use their names as keys. Assume names are unique.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If names of 2 users are same in above problem, what will happen?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If fruit options of 2 users are same in above problem, what will happen?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check if a set is a subset of another set using comparison operator and isubset() operator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python program to print out a set containing all the colors from color1 which are not present in color2.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color1 = set([&#34;White&#34;,&#34;Black&#34;, &#34;Red&#34;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color2 = set([&#34;Red&#34;, &#34;Green&#34;]), Expected Output:{&#39;Black&#39;,&#39;White&#39;}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a use case for each of the following Python data structures: tuple, list, and dictionary.  Explain why each use case is appropriate for each data structure as opposed to the others.&lt;/p&gt;
&lt;p&gt;List - A shopping list. The list type is appropriate, since it can be changed.&lt;/p&gt;
&lt;p&gt;Tuple - The first 7 prime numbers. A tuple is a suitable structure, because it is a immutable data type.&lt;/p&gt;
&lt;p&gt;Dictionary - A list of words and their meanings. Since a dictionary is made up by key-value pairs, the key would be the word and the value would assume it’s meaning.&lt;/p&gt;
&lt;p&gt;Set - A list of registered e-mails in a system. It’s a proper way to store them, for the e-mails must each be unique.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask the phone number from a user, and convert integers into strings like: 1 to one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creat a dictionary of animal names as keys and their pictures as values. Hint: to get picture/emoji’s press window+period(.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take input from user to show the picture of the animal. Also provide to look at the names of the animals in the dictionary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If animal’s picture is not in the dictionary, provide the option to add the name and picture in the dictionary on run time.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conditional-expressions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conditional Expressions&lt;/h1&gt;
&lt;p&gt;Decision making is required when we want to execute a code only if a certain condition is satisfied. The if…elif…else statement is used in Python for decision making. If-else conditional statement is used in when a situation leads to &lt;strong&gt;two conditions&lt;/strong&gt; and &lt;strong&gt;one of them should hold true&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;if-else-statement-syntax&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;If else Statement Syntax&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=1
if x==1:
    print(&amp;quot;x is 1&amp;quot;) # this is body of if or statement
#else:
 #   print(&amp;quot;x is not 1&amp;quot;) # this is body of elif&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x is 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the program evaluates the &lt;code&gt;test expression&lt;/code&gt; and will execute statement(s) only if the test expression is &lt;code&gt;True&lt;/code&gt;. If the test expression is &lt;code&gt;False&lt;/code&gt;, the statement(s) is not executed.&lt;/p&gt;
&lt;p&gt;In Python, the body of the &lt;code&gt;if&lt;/code&gt; statement is indicated by the &lt;strong&gt;indentation&lt;/strong&gt;. The body starts with an indentation and the first unindented line marks the end.&lt;/p&gt;
&lt;p&gt;Remember: Python interprets non-zero values as &lt;code&gt;True&lt;/code&gt;. &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; are interpreted as &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;Python_if_else_statement.webp&#34; /&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;indentation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Indentation&lt;/h2&gt;
&lt;p&gt;Python uses &lt;strong&gt;indentation&lt;/strong&gt; for blocks, instead of curly braces. Both &lt;strong&gt;tabs and spaces&lt;/strong&gt; are supported, but the standard indentation requires standard Python code to &lt;strong&gt;use four spaces&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=1
if x==1:
    #indented four spaces
    print(&amp;quot;x is 1&amp;quot;)
else:
    print(&amp;quot;x is not 1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x is 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If statement, without indentation (will raise an error).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;if-elif-and-else-statement&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;If elif and else Statement&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=-1
if x==1:
    #indented four spaces
    print(&amp;quot;x is 1&amp;quot;) # this is body of if or statement
elif x&amp;lt;0:
  print(&amp;quot;x is less than zero&amp;quot;)
else:
    print(&amp;quot;x is not 1&amp;quot;) # this is body of elif&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x is less than zero&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;if_elif_else_statement.jpg&#34; /&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;div id=&#34;example-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Write a program to print ‘Yes’ when the number entered by the user is greater than or equal to 25.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#n = int(input(&amp;quot; Please enter the number: &amp;quot;))
n=32
if n&amp;gt;=25:
  print(&amp;quot;Yes&amp;quot;)
else:
  print(&amp;quot;No&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Yes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Write a program to check if a number entered by the user is positive or negative or zero and display an appropriate message.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#n = int(input(&amp;quot; Please enter the number: &amp;quot;))
n = -4
if n&amp;gt;0:
  print(&amp;quot;Number is +ve&amp;quot;)
elif n==0:
  print(&amp;quot;Number is zero&amp;quot;)
else:
  print(&amp;quot;Number is -ve&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number is -ve&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we use if elif and else statement &lt;strong&gt;&lt;em&gt;if one of the statement is true&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;nested-if-statements&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nested if statements&lt;/h2&gt;
&lt;p&gt;We can have a &lt;code&gt;if...elif...else&lt;/code&gt; statement inside another &lt;code&gt;if...elif...else&lt;/code&gt; statement. This is called &lt;strong&gt;nesting&lt;/strong&gt; in computer programming.&lt;/p&gt;
&lt;p&gt;Any number of these statements can be nested inside one another. Indentation is the only way to figure out the level of nesting. They can get confusing, so they must be avoided unless necessary.&lt;/p&gt;
&lt;p&gt;Example: Write a program to check if a number entered by the user is positive or negative or zero and display an appropriate message using nested if statement.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#n = int(input(&amp;quot; Please enter the number: &amp;quot;))
n = 3
if n&amp;gt;=0:
  if n==0:
    print(&amp;quot;Number is zero&amp;quot;)
  else:
    print(&amp;quot;Number is +ve&amp;quot;)
else:
  print(&amp;quot;Number is -ve&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Number is +ve&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;note&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Note:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There can any number of elif statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;last else will be executed if all elif conditions/statements fails.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-if-conditions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiple If Conditions&lt;/h2&gt;
&lt;div id=&#34;example-6&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Write a program to print largest number among four numbers entered by the user.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;n1 = 4 #n1 = int(input(&amp;quot; Enter the First Number : &amp;quot;))
n2 = 3 #n2 = int(input(&amp;quot; Enter the 2nd  Number : &amp;quot;))
n3 = 2 #n3 = int(input(&amp;quot; Enter the 3rd Number : &amp;quot;))
n4 = 1 #n4 = int(input(&amp;quot; Enter the 4th Number : &amp;quot;))

if n1&amp;gt;n2:
    f1 = n1
else:
   f1 = n2
if n3&amp;gt;n4:
   f2 = n3
else:
    f2 = n4
if f1&amp;gt;f2:
    print(f&amp;quot; The Largest Number is : {f1} &amp;quot;)
else:
    print(f&amp;quot; The Largest Number is : {f2} &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  The Largest Number is : 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Write a program to check whether a user entered number is odd or even?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take two numbers from user and print larger.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take three numbers from user, and print the largest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to check whether a user entered number is odd or even,valid only for first 10 natural numbers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;write a program to get the difference b/w a given number and 17, if number is greater than 17, return double the absolute difference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to calculate the sum of three given numbers, if values are equal then return thrice of their sum.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a prog. to get a new string from a given string where “Is” has been added to the front. if the given string already begins with “Is” then return the string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If Question mark ‘?’ is missing in above string, then also include the ‘?’ at the end.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to find out whether a given post is talking about “SBP” or not.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Write a program to find out whether a student is fail or pass? if it require total 40% and at-least 33% in each subject to pass. Assume 3 subjects, input from the user and marks are out of 100.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to detect a spam (OSICO Spam detector), a spam comment is defined as a text containing following keywords:&lt;/p&gt;
&lt;p&gt;“make a lot of money”, “buy now”, “subscribe this”, “click this”. Write a program to detect these spams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to calculate the grade of an officer from his numeric rating from the following scheme: greater than 4.5 implies A, greater than 3.5 implies B+, greater than 3 implies B and else C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to find out the type of the variable Var1 = ——-. suppose 1+2j check whether it is int, float, str, bool, complex, tuple, dict, list, or unknown.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python program to sum of three given integers. However, if two values are equal sum will be zero.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to calculate the fare of a journey based on the following conditions, fare will be charged Rs. 15/km for first 100km, for next 200km it will be Rs.14/km, for next 200km it will be Rs.12/km and for distance above 500km, it will be charged Rs.11/km.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a routine to convert weight from Kg to pounds or pounds to kg.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loops&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Loops&lt;/h1&gt;
&lt;p&gt;Loops are one of the most &lt;strong&gt;powerful&lt;/strong&gt; and basic concepts in programming. A loop can contain a set of statements that keeps on executing until a &lt;strong&gt;specific condition is reached&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Programming languages provide us the &lt;strong&gt;concept of loops&lt;/strong&gt; which helps us in executing some task &lt;strong&gt;&lt;em&gt;n number of times&lt;/em&gt;&lt;/strong&gt; where n can be any whole number. They are pretty &lt;strong&gt;useful&lt;/strong&gt; and can be &lt;strong&gt;applied&lt;/strong&gt; to various use cases.&lt;/p&gt;
&lt;p&gt;There are two types of loops in Python.&lt;/p&gt;
&lt;div id=&#34;the-for-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The “for” loop&lt;/h2&gt;
&lt;p&gt;For loop iterate over a given sequence (range, list, tuple, string etc.) or other iterable objects. Iterating over a sequence is called traversal. Flow chart of for loop is:&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;for-loop.jpg&#34; /&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;looping-through-string&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Looping through String&lt;/h2&gt;
&lt;p&gt;Even strings are iterable objects, they contain a sequence of characters:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for letter in &amp;#39;string&amp;#39;:
  print(letter)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## s
## t
## r
## i
## n
## g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;looping-through-a-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Looping through a List&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Banks = [&amp;#39;ABL&amp;#39;, &amp;#39;MCB&amp;#39;, &amp;#39;NBP&amp;#39;]
for bank in Banks:
  print(bank)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ABL
## MCB
## NBP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-use-index&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to Use Index&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Banks = [&amp;#39;ABL&amp;#39;, &amp;#39;MCB&amp;#39;, &amp;#39;NBP&amp;#39;]
for i in range(3):
  print(i, Banks[i])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0 ABL
## 1 MCB
## 2 NBP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;use-of-enumerate-for-indexing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Use of Enumerate for Indexing&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Loop through the list and iterate on both index and element value

squares=[&amp;#39;red&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;purple&amp;#39;, &amp;#39;blue&amp;#39;]

for i, square in enumerate(squares):
    print(i, square)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0 red
## 1 yellow
## 2 green
## 3 purple
## 4 blue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can change the elements in a list:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Use for loop to change the elements in list

squares = [&amp;#39;red&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;purple&amp;#39;, &amp;#39;blue&amp;#39;]

for i in range(0, 5):
    print(&amp;quot;Before square &amp;quot;, i, &amp;#39;is&amp;#39;,  squares[i])
    squares[i] = &amp;#39;white&amp;#39;
    print(&amp;quot;After square &amp;quot;, i, &amp;#39;is&amp;#39;,  squares[i])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Before square  0 is red
## After square  0 is white
## Before square  1 is yellow
## After square  1 is white
## Before square  2 is green
## After square  2 is white
## Before square  3 is purple
## After square  3 is white
## Before square  4 is blue
## After square  4 is white&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quick Quiz: Print the following pattern using for loop.&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;++&lt;/p&gt;
&lt;p&gt;+++++&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++++++++&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list = [3,2,5,3,9]
for i in list:
  print(&amp;#39;+&amp;#39;*i)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## +++
## ++
## +++++
## +++
## +++++++++&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;iterating-over-tuples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Iterating over tuples&lt;/h2&gt;
&lt;p&gt;We can use for &lt;strong&gt;loops to iterate&lt;/strong&gt; on a tuple. The for loop will keep on iterating until the elements in the tuples are exhausted.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;Tuple = (&amp;#39;SBP&amp;#39;, &amp;#39;NIBAF&amp;#39;, &amp;#39;BSC&amp;#39;)
for entities in Tuple:
  print(entities)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## SBP
## NIBAF
## BSC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-range-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The range ( ) function&lt;/h2&gt;
&lt;p&gt;When using for loops in Python, the range() function is pretty useful to specify the number of times the loop is executed. It yields a sequence of numbers within a specified range.&lt;/p&gt;
&lt;p&gt;syntax: range (start, stop, steps)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first argument is the starting value. It is zero by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second argument is the ending value of the range.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third argument is the number of steps to take after each yield.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;div id=&#34;iterating-over-range-object&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Iterating over range object&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# for loop
for i in range(2,10,3):
  print(i)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2
## 5
## 8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;an-other-for-loop-with-else&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;an other for loop with else&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for char in &amp;#39;SBP&amp;#39;:
  print(char)
else:
  print(&amp;#39;loop ended&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## S
## B
## P
## loop ended&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;nested-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nested Loop&lt;/h2&gt;
&lt;p&gt;A nested loop is a loop inside a loop. The “inner loop” will be executed once for each iteration of the “outer loop” i.e., in each iteration of the outer loop, inner loop execute all its iteration. &lt;strong&gt;For each iteration of an outer loop, the inner loop re-start and completes its execution&lt;/strong&gt; before the outer loop can continue to its next iteration.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list1 = [&amp;#39;Rizwan&amp;#39;, &amp;#39;Adil&amp;#39;, &amp;#39;Ahmad&amp;#39;]
list2 = [&amp;#39;JD&amp;#39;, &amp;#39;OG-4&amp;#39;, &amp;#39;SBP&amp;#39;]
for officer in list1:
    for x in list2:
        print(f&amp;#39;({officer}, {x})&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (Rizwan, JD)
## (Rizwan, OG-4)
## (Rizwan, SBP)
## (Adil, JD)
## (Adil, OG-4)
## (Adil, SBP)
## (Ahmad, JD)
## (Ahmad, OG-4)
## (Ahmad, SBP)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quick Quiz: Create Co-ordinate (0,0) ,(0,1) ,(0,2) , (1,0) ,(1,1) ,(1,2) ,(2,0) ,(2,1) ,(2,2) ,(3,0) ,(3,1) ,(3,2)&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for x in range(4):
  for y in range(3):
    print(f&amp;quot;({x},{y})&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (0,0)
## (0,1)
## (0,2)
## (1,0)
## (1,1)
## (1,2)
## (2,0)
## (2,1)
## (2,2)
## (3,0)
## (3,1)
## (3,2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-while-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The “while” loop&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;while loop&lt;/strong&gt; in Python executes a block of code &lt;strong&gt;until the specified condition becomes False&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Flow chart of while loop is :&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;whileLoopFlowchart.webp&#34; /&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;count = 0 # Initializing, To Give an initial value to a variable
while count&amp;lt;10: # Setting a condition
  print(count)
  count+=2 # Incrementing the initial value by 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0
## 2
## 4
## 6
## 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, the while statement checks if count is less than 10.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initially&lt;/strong&gt;, count is zero so the statement is true and it executes the body of while. Then the count gets incremented by 2. Again we check the condition and this goes on till the condition becomes false.&lt;/p&gt;
&lt;p&gt;Here, when our code checks 10&amp;lt;10, the statement returns False and so the code in while block is not executed.&lt;/p&gt;
&lt;div id=&#34;example-7&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# While Loop Example

dates = [1982, 1980, 1973, 2000]

i = 0
year = dates[0]

while(year != 1973):    
    print(year)
    i = i + 1
    year = dates[i]
    &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1982
## 1980&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;It took &amp;quot;, i ,&amp;quot;repetitions to get out of loop.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## It took  2 repetitions to get out of loop.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;infinite-loop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Infinite loop&lt;/h2&gt;
&lt;p&gt;A loop is called an infinite loop when the loop will never reach its end.&lt;/p&gt;
&lt;p&gt;Usually, when a condition is always True in a while loop, the loop will become an infinite loop. So we should be careful when writing conditions and while updating variables used in the loop.&lt;/p&gt;
&lt;p&gt;In Python shell, we can &lt;strong&gt;stop/terminate&lt;/strong&gt; the program on an &lt;strong&gt;infinite loop by using CTRL + C&lt;/strong&gt;. In jupyter notebook press &lt;code&gt;i&lt;/code&gt; twice.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Quick Quiz&lt;/em&gt;: &lt;em&gt;Write a program to print 1 to 50 using a while loop&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Quick Quiz&lt;/em&gt;: &lt;em&gt;Write a program to print the contents of a &lt;code&gt;list=[&#39;C&#39;, &#39;C++&#39;, &#39;java&#39;, &#39;fortran&#39;,&#39;python&#39;]&lt;/code&gt; using while loop&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loop-control-statements-in-python&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loop control statements in Python&lt;/h2&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&#34;loop-control-statement-in-python.png&#34; /&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;num = 0
while num&amp;lt;10:
  num +=1
  if num==5:
    break
  print(num)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1
## 2
## 3
## 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this loop, we are &lt;strong&gt;incrementing&lt;/strong&gt; the value of &lt;strong&gt;num variable&lt;/strong&gt; and then printing it. When the num value becomes &lt;strong&gt;5&lt;/strong&gt; the &lt;strong&gt;break statement&lt;/strong&gt; is &lt;strong&gt;executed&lt;/strong&gt; which &lt;strong&gt;terminates&lt;/strong&gt; the loop and therefore loop is not &lt;strong&gt;executed further&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;num = 0
while num&amp;lt;10:
  num +=1
  if num==5:
    continue
  print(num)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1
## 2
## 3
## 4
## 6
## 7
## 8
## 9
## 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we see that when the &lt;strong&gt;num&lt;/strong&gt; variable is equal to &lt;strong&gt;5&lt;/strong&gt;, the &lt;strong&gt;continue statement is executed&lt;/strong&gt;. It then &lt;strong&gt;doesn’t execute the lines after the continue statement&lt;/strong&gt; and the &lt;strong&gt;control&lt;/strong&gt; is sent to the &lt;strong&gt;next iteration&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;common-mistakes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Common Mistakes&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Mostly people forgte to initialize the variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is second issue, we might face if we forget to initialize the variables with the right value. we might have already used the variable in our program. if we reuse a variable without setting the correct value from the start, it will still have the value from before.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x=1
sum = 0
while x&amp;lt;10:
  sum+=x
  x+=1
print(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Whenever you are writing a loop, check that you are initializing all the variables you want to use before you use them.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;product = 1
x=1
while x&amp;lt;10:
  product=product*x
  x+=1
print(product) # what we call this outcome!&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 362880&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-6&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;A list of groceries is given below, print all items with its index.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groceries = [&amp;quot;bananas&amp;quot;,&amp;quot;butter&amp;quot;,&amp;quot;cheese&amp;quot;,&amp;quot;toothpaste&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a combination of all the letters of ‘SBP’ and ‘NIBAF’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to say “hello” to all persons in a list which starts with M. &lt;code&gt;List = [&#39;Ahmad&#39;, &#39;Muhammad&#39;, &#39;Essa&#39;, &#39;Mossa&#39;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Print odd numbers in first 10 numbers using while loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also find the sum of all numbers in above question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to print the multiplication table of a number entered by the user, using &lt;strong&gt;‘for’ loop.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attempt above problem using while loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the total of &lt;code&gt;[10,20,30]&lt;/code&gt; using for loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to guess a secrete number in 3 attempts using while loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solve above problem while generating secrete number randomly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a hint to make problem easy, if guess is larger, then print ‘its larger’, otherwise ‘its smaller’&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program whether a given number is prime or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the prime numbers in a given range.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;store the numbers obtained in above question as a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the sum of all the numbers in the list above in question 14.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Challenge: calculate the time required to run the above code 500 times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Draw the following pattern using nested loop.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#    xxxxx
#    xx
#    xxxxx
#    xx
#    xx&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the co-ordinates (0,0,0) …(2,2,2) using nested for loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a &lt;code&gt;for&lt;/code&gt; loop the prints out all the element between &lt;strong&gt;-5&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt; using the range function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a while loop to display the values of the Rating of an album playlist stored in the list &lt;code&gt;PlayListRatings&lt;/code&gt;. If the score is less than 6, exit the loop. The list &lt;code&gt;PlayListRatings&lt;/code&gt; is given by: &lt;code&gt;PlayListRatings = [10, 9.5, 10, 8, 7.5, 5, 10, 10]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to sum first n natural numbers, take input from user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write program to find the factorial of a number n.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to print the following pattern.&lt;br /&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*
* *
* * *
* * * *
* * * * *&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python program to concatenate all elements in a list into a string and return it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a nested &lt;code&gt;for&lt;/code&gt; loop program to print multiplication table in Python from 2 to 10.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python program to print all even numbers from a given numbers list in the same order and stop the printing if any numbers that come after 237 in the sequence.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers = [386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, 399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, 815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, 958,743, 527]&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 (both included) and print the result in the form of a list.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-and-recursion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Functions and Recursion&lt;/h1&gt;
&lt;div id=&#34;function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Function&lt;/h2&gt;
&lt;p&gt;A function is a group of related statements that performs a specific task.&lt;/p&gt;
&lt;p&gt;Functions help break our program into smaller and modular chunks. As our program grows larger and larger, functions make it more organized and manageable. Furthermore, it avoids repetition and makes the code reusable any number of time.&lt;/p&gt;
&lt;div id=&#34;syntax-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def function_name(parameters):
    &amp;quot;&amp;quot;&amp;quot;docstring&amp;quot;&amp;quot;&amp;quot;
    statement(s)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above shown is a function definition that consists of the following components.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keyword &lt;strong&gt;&lt;code&gt;def&lt;/code&gt;&lt;/strong&gt; that marks the start of the function header.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A function name to uniquely identify the function. Function naming follows the same rules of writing identifiers in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parameters (&lt;code&gt;arguments&lt;/code&gt;) through which we pass values to a function. They are optional.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A colon (:) to mark the end of the function header.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optional documentation string (doc string) to describe what the function does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more valid python statements that make up the function body. Statements must have the same indentation level (usually 4 spaces).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The statement &lt;code&gt;return&lt;/code&gt; exits a function, optionally passing back a value..&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;example-8&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def greet(name):
  &amp;#39;&amp;#39;&amp;#39;Greeting Function&amp;#39;&amp;#39;&amp;#39;
  print(&amp;quot;Good Day, &amp;quot; +name)
greet(&amp;quot;Ahmad&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Good Day, Ahmad&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quick-quiz&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quick Quiz&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Define a function to say Hello, good morning &#34;name&#34;, if the person in your contact list, otherwise ask &#34;Who are You?&#34;.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Define a function to return the absolute value of the entered number.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;type-of-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Type of functions&lt;/h2&gt;
&lt;p&gt;Basically, we can divide functions into the following two types:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Built-in functions&lt;/code&gt; - Functions that are built into Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;User-defined functions&lt;/code&gt; - Functions defined by the users themselves.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, len( ), range ( ) and print( ) are &lt;code&gt;built-in functions&lt;/code&gt;, and the &lt;code&gt;greet function&lt;/code&gt; defined above is a &lt;code&gt;user-defined function&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;functions-with-arguments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Functions with arguments&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def greet1(name,msg):
  print(&amp;quot;Hello&amp;quot;, name +&amp;#39;, &amp;#39;+msg)
greet1(&amp;#39;ahmad&amp;#39;, &amp;#39;how are you&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Hello ahmad, how are you&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the function &lt;code&gt;greet1()&lt;/code&gt; has two parameters.&lt;/p&gt;
&lt;p&gt;Since we have called this function with two arguments, it runs smoothly and we do not get any error.&lt;/p&gt;
&lt;p&gt;If we call it with a different number of arguments, the interpreter will show an error message. Below is a call to this function with one and no arguments along with their respective error messages.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def greet1(name,msg):
  print(&amp;quot;Hello&amp;quot;, name +&amp;#39;, &amp;#39;+msg)
greet1(&amp;#39;ahmad&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: greet1() missing 1 required positional argument: &amp;#39;msg&amp;#39;
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;default-argument-or-parameter-value&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Default argument or parameter value&lt;/h2&gt;
&lt;p&gt;Function &lt;strong&gt;arguments&lt;/strong&gt; can have &lt;strong&gt;default values&lt;/strong&gt; in Python. We can provide a default value to an argument by &lt;strong&gt;using the assignment operator (=)&lt;/strong&gt;. Here is an example.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def greet1(name ,msg=&amp;quot;How do you do&amp;quot;):
  print(&amp;quot;Hello&amp;quot;, name +&amp;#39;, &amp;#39;+msg)
greet1(&amp;#39;Ahmad&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Hello Ahmad, How do you do&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The input to a function is called a formal parameter.&lt;/p&gt;
&lt;p&gt;A variable that is declared inside a function is called a &lt;strong&gt;local variable&lt;/strong&gt;. The parameter only exists within the function (i.e. the point where the function starts and stops).&lt;/p&gt;
&lt;p&gt;A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def square(a): # formal parameter
  &amp;#39;&amp;#39;&amp;#39;
  This function will return the sqaure of number plus 1
  
  &amp;#39;&amp;#39;&amp;#39;
  b = 1 # local variable
  c = a*a + b
  return c

print(square(2))
  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;recursive-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Recursive function&lt;/h2&gt;
&lt;p&gt;Recursion is the process of defining something in terms of itself. That is, a function that calls itself. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;factorial(n)=n * factorial(n-1)&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;example-9&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example:&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#n! = 1*2*3*...*n
n=3
product = 1
for i in range(n):
  product=product*(i+1)
print(product)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;return-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Return Values&lt;/h3&gt;
&lt;p&gt;The Python return statement is a &lt;strong&gt;special statement that you can use inside a function or method to send the function’s result back to the caller&lt;/strong&gt;. To let a function return a value, use the return statement:&lt;/p&gt;
&lt;p&gt;above example can be wrapped in a function as:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def fact(n):
  product = 1
  for i in range(n):
    product=product*(i+1)
  return product
print(fact(3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Recursion&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#num = input(&amp;quot;Enter a number: &amp;quot;)
num=3
def recur_factorial(n):
   if n == 1:
       return n
   elif n &amp;lt; 1:
       return (&amp;quot;NA&amp;quot;)
   else:
       return n*recur_factorial(n-1)

print (recur_factorial(int(num)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pre-defined-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pre-defined Functions&lt;/h2&gt;
&lt;p&gt;There are many pre-defined functions in Python, so let’s start with the simple ones.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;print()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Build-in function print()

list1 = [10.0, 8.5, 9.5, 7.0, 7.0, 9.5, 9.0, 9.5] 
print(list1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [10.0, 8.5, 9.5, 7.0, 7.0, 9.5, 9.0, 9.5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;sum()&lt;/code&gt; function adds all the elements in a list or tuple: try pease&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;len()&lt;/code&gt; function show the length a list or tuple: try please&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exceptions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;An exception is an error that occurs during the execution of code. This error causes the code to raise an exception and if not prepared to handle it will halt the execution of the code.&lt;/p&gt;
&lt;div id=&#34;exampls&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Exampls&lt;/h3&gt;
&lt;p&gt;Run each piece of code and observe the exception raised&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;1/0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): ZeroDivisionError: division by zero
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = a+5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unsupported operand type(s) for +: &amp;#39;set&amp;#39; and &amp;#39;int&amp;#39;
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
a[5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in py_call_impl(callable, dots$args, dots$keywords): IndexError: list index out of range
## 
## Detailed traceback:
##   File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise_functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise_Functions&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a function &lt;code&gt;con&lt;/code&gt; that add two number .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can the &lt;code&gt;con&lt;/code&gt; function we defined before be used to concatenate lists or tuples?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Come up with a function that divides the first input by the second input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define a function to find the greatest of three numbers using.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you prevent python print( ) function to print a new line at the end.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a recursive function to calculate the sum of first n natural numbers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function to print first n lines of the following pattern.&lt;br /&gt;
*****&lt;em&gt;&lt;strong&gt;&lt;br /&gt;
***&lt;/strong&gt;&lt;br /&gt;
&lt;/em&gt;*&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function which converts inches in cm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function to remove a given word from a string and strip it at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python function to sum all the numbers in a list. Sample List : (8, 2, 3, 0, 7)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python function that takes a list and returns a new list with unique elements of the first list. Sample List : &lt;span class=&#34;math display&#34;&gt;\[1,2,3,3,3,3,4,5\]&lt;/span&gt;, Unique List : &lt;span class=&#34;math display&#34;&gt;\[1, 2, 3, 4, 5\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a Python function to check whether a number is perfect or not.&lt;/p&gt;
&lt;p&gt;According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).&lt;/p&gt;
&lt;p&gt;Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors : ( 1 + 2 + 3 + 6 ) / 2 =6.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function which is capable of addition, subtraction, division and multiplication of two numbers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;p&gt;Solution! (Click to expand)&lt;/p&gt;
&lt;/summary&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#num = input(&amp;quot;Enter a number: &amp;quot;)
num=3
def recur_factorial(n):
   if n == 1:
       return n
   elif n &amp;lt; 1:
       return (&amp;quot;NA&amp;quot;)
   else:
       return n*recur_factorial(n-1)

print (recur_factorial(int(num)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://myaseen.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://myaseen.github.io/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://myaseen.github.io/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://myaseen.github.io/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://myaseen.github.io/terms/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://myaseen.github.io/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://myaseen.github.io/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://myaseen.github.io/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://myaseen.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://myaseen.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
